class Ex{constructor(){this.pos={curr:null,prev:null},this.create(),this.init(),this.rendering=!0,this.render(),this.startCheckInterval()}move(s,e){this.cursor.style.left=`${s}px`,this.cursor.style.top=`${e}px`}create(){this.cursor||(this.cursor=document.createElement("div"),this.cursor.id="cursor",this.cursor.classList.add("xs-hidden","hidden"),document.body.append(this.cursor))}init(){document.onmousemove=s=>{null==this.pos.curr&&this.move(s.clientX-8,s.clientY-8),this.pos.curr={x:s.clientX-8,y:s.clientY-8},this.cursor.classList.remove("hidden")},document.onmouseenter=()=>this.cursor.classList.remove("hidden"),document.onmouseleave=()=>this.cursor.classList.add("hidden"),document.onmousedown=()=>this.cursor.classList.add("active"),document.onmouseup=()=>this.cursor.classList.remove("active")}render(){this.rendering&&(this.pos.prev?(this.pos.prev.x=Math.lerp(this.pos.prev.x,this.pos.curr.x,.35),this.pos.prev.y=Math.lerp(this.pos.prev.y,this.pos.curr.y,.35),this.move(this.pos.prev.x,this.pos.prev.y)):this.pos.prev=this.pos.curr,requestAnimationFrame((()=>this.render())))}startCheckInterval(){setInterval((()=>{this.pos.curr&&!this.isMouseInsideViewport()&&this.cursor.classList.add("hidden")}),100)}isMouseInsideViewport(){return this.pos.curr.x>=0&&this.pos.curr.y>=0&&this.pos.curr.x<=window.innerWidth&&this.pos.curr.y<=window.innerHeight}pauseRendering(){this.rendering=!1}resumeRendering(){this.rendering||(this.rendering=!0,this.render())}}Math.lerp=(s,e,r)=>(1-r)*s+r*e;const cursorInstance=new Ex;new IntersectionObserver((s=>{s.forEach((s=>{s.isIntersecting?cursorInstance.resumeRendering():cursorInstance.pauseRendering()}))})).observe(document.body);